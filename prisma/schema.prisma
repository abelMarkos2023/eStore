generator client {
  provider = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Product {
  id             String   @id  @default(uuid())  @db.Uuid
  name           String
  slug           String  @unique(map:"product_slug_idx")
  category       String
  description    String
  images         String[]
  brand          String
  price          Decimal  @default(0)  @db.Decimal(12,2)
  stock          Int
  rating         Decimal  @default(0)  @db.Decimal(12,2)
  numReviews      Int      @default(0)
  isFeatured     Boolean  @default(false)
  banner         String?
  createdAt      DateTime @default(now())  @db.Timestamp(6)
  orderItem    OrderItem[]
}

model User {
   id             String      @id  @default(uuid())  @db.Uuid
   name           String      @default("NO_Name")
   email          String      @unique(map: "user_email_idx")
   password       String?
   image          String?
   role           String       @default("user")
   address        Json         @db.Json
   paymentMethod  String
   emailVerfied   DateTime     @db.Timestamp(6)
   createdAt      DateTime     @default(now())    @db.Timestamp(6)
   updatedAt      DateTime     @db.Timestamp(6)
   account        Account[]
   session        Session[]
   cart           Cart[]
   order          Order[]
}

model Account {
  userId            String     @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime          @default(now())    @db.Timestamp(6)
  updatedAt DateTime          @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())   @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Cart {
  id             String      @id  @default(uuid())  @db.Uuid
  sessionId      String
  userId         String?     @db.Uuid
  items          Json[]        @db.Json
  itemsPrice     Decimal     @db.Decimal(12,2)
  shippingPrice  Decimal     @db.Decimal(12,2)
  taxPrice       Decimal     @db.Decimal(12,2)
  totalPrice     Decimal     @db.Decimal(12,2)
  createdAt      DateTime    @default(now())       @db.Timestamp(6)
  user           User?     @relation(fields: [userId], references: [id] , onDelete: Cascade)


}

model Order {
  id                       String      @id  @default(uuid())  @db.Uuid
  userId                   String     @db.Uuid
  shippingAddress          Json       @db.Json
  paymentsMethod           String
  paymentResult            Json?        @db.Json
  isPaid                   Boolean     @default(false)
  paidAt                   DateTime?   @db.Timestamp(6)
  isDelivered              Boolean     @default(false)
  deliveredAt              DateTime?   @db.Timestamp(6)
  itemsPrice               Decimal     @db.Decimal(12,2)
  shippingPrice            Decimal     @db.Decimal(12,2)
  taxPrice                 Decimal     @db.Decimal(12,2)
  totalPrice               Decimal     @db.Decimal(12,2)
  createdAt                DateTime    @default(now())       @db.Timestamp(6)
  user                     User     @relation(fields: [userId], references: [id] , onDelete: Cascade)
  orderItems              OrderItem[]
}

model OrderItem{
  orderId      String   @db.Uuid
  productId    String   @db.Uuid
  name         String
  slug         String
  qty          Int
  price        Decimal   @db.Decimal(12,2)
  image        String
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([orderId, productId], map: "orderItems_orderId_productId_pk")
}